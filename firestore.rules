/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes rapid prototyping by focusing on authorization and skipping data validation.
 * It enforces user-based ownership for private data and allows public read access where appropriate.
 *
 * Data Structure:
 * - Products: Publicly accessible product listings.
 * - Categories: Publicly accessible product categories.
 * - Artists: Publicly accessible artist profiles.
 * - Users: User profiles stored under `/users/{userId}` with owner-only access.
 * - Orders: Customer orders stored with owner-only access.
 * - Settings: Singleton document for global settings, publicly readable but unmodifiable.
 *
 * Key Security Decisions:
 * - User listing is disabled.
 * - Public read access is granted for Products, Categories, Artists, and Settings.
 * - Owner-only write access is enforced for Users and Orders.
 * - Data validation is skipped in favor of rapid iteration.
 *
 * Denormalization for Authorization:
 * The `Order` entity requires a `userId` field to match the authenticated user's ID to enforce ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Allows public read access to product listings. Only the owner can create, update, or delete products.
     * @path /products/{productId}
     * @allow (get, list): Any user can read product listings.
     * @allow (create): Only the product's owner (determined by the `artistId` field) can create a product, and the `artistId` must match the authenticated user's ID.
     * @allow (update, delete): Only the product's owner (determined by the `artistId` field) can update or delete a product.
     * @deny (create): If the `artistId` in the request does not match the authenticated user's ID.
     * @principle Allows public reads with owner-only writes, enforcing document ownership.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.artistId == request.auth.uid;
      allow update, delete: if isSignedIn() && resource.data.artistId == request.auth.uid && resource != null;
    }

    /**
     * @description Allows public read access to product categories. No user can create, update, or delete categories.
     * @path /categories/{categoryId}
     * @allow (get, list): Any user can read product categories.
     * @deny (create, update, delete): No user can create, update, or delete product categories.
     * @principle Allows public reads with no writes, providing read-only access to category data.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to artist profiles. Only the artist can create, update, or delete their profile.
     * @path /artists/{artistId}
     * @allow (get, list): Any user can read artist profiles.
     * @allow (create): Only the artist can create their profile, and the `artistId` must match the authenticated user's ID.
     * @allow (update, delete): Only the artist can update or delete their own profile.
     * @deny (create): If the `artistId` in the request does not match the authenticated user's ID.
     * @principle Allows public reads with owner-only writes, enforcing document ownership.
     */
    match /artists/{artistId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Stores user profile information.
     * @path /users/{userId}
     * @allow (get): Only the user can read their own profile.
     * @allow (create): Only the user can create their own profile, and the `userId` must match the authenticated user's ID.
     * @allow (update): Only the user can update their own profile.
     * @allow (delete): Only the user can delete their own profile.
     * @deny (list): User listing is not allowed.
     * @deny (create): If the `userId` in the path does not match the authenticated user's ID.
     * @principle Restricts access to a user's own data tree, enforcing document ownership.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Stores customer orders.
     * @path /orders/{orderId}
     * @allow (get, list): Only the user can read or list their own orders.
     * @allow (create): Only the user can create an order, and the `userId` must match the authenticated user's ID.
     * @allow (update): Only the user can update their own order.
     * @allow (delete): Only the user can delete their own order.
     * @deny (create): If the `userId` in the request does not match the authenticated user's ID.
     * @principle Enforces document ownership for writes, restricting order management to the owning user.
     */
    match /orders/{orderId} {
      allow get, list: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Stores global application settings. Only the socialMedia document is used.
     * @path /settings/{settingId}
     * @allow (get, list): Any user can read the settings.
     * @deny (create, update, delete): No user can create, update, or delete settings.
     * @principle Allows public reads with no writes, providing read-only access to settings data.
     */
    match /settings/{settingId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}