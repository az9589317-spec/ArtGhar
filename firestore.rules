/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model for administrative functions
 * and public read access to product-related data. User profiles are protected
 * under an ownership model.
 *
 * Data Structure:
 * - /products/{productId}: Public product listings.
 * - /categories/{categoryId}: Public product categories.
 * - /artists/{artistId}: Public artist profiles.
 * - /users/{userId}: Private user profiles.
 * - /orders/{orderId}: Order information, restricted to the user who placed the order.
 * - /settings/{settingId}: Application settings.
 *
 * Key Security Decisions:
 * - Public read access for products, categories and artists
 * - User profiles are only accessible to the owning user.
 * - Only authenticated users with the "admin" role can create, update, or delete product related documents.
 * - Denormalization for Authorization: The 'role' field in the /users/{userId} document
 *   is used to determine admin privileges without requiring additional reads.
 *   Order documents are secured based on the `userId` field matching the authenticated user's ID.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the existing owner of the document.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has the "admin" role.
     * @return {boolean} True if the user has the "admin" role, false otherwise.
     */
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    /**
     * @description Checks if the user is creating a product with valid artistId and categoryId.
     * @return {boolean} True if the user is creating a valid product, false otherwise.
     */
    function isValidProductCreate() {
        return isSignedIn() && isAdmin() && request.resource.data.artistId is string && request.resource.data.categoryId is string;
    }


    /**
     * @description Rules for the /products collection.
     * @path /products/{productId}
     * @allow (get, list): Anyone can read product data.
     * @allow (create, update, delete): Only admins can modify product data.
     * @deny (create, update, delete): Non-admins cannot modify product data.
     * @principle Allows public read access, restricts write access to admins.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if isValidProductCreate();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for the /categories collection.
     * @path /categories/{categoryId}
     * @allow (get, list): Anyone can read category data.
     * @allow (create, update, delete): Only admins can modify category data.
     * @deny (create, update, delete): Non-admins cannot modify category data.
     * @principle Allows public read access, restricts write access to admins.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for the /artists collection.
     * @path /artists/{artistId}
     * @allow (get, list): Anyone can read artist data.
     * @allow (create, update, delete): Only admins can modify artist data.
     * @deny (create, update, delete): Non-admins cannot modify artist data.
     * @principle Allows public read access, restricts write access to admins.
     */
    match /artists/{artistId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for the /users collection.
     * @path /users/{userId}
     * @allow (get, update, delete): Only the user can access their own profile.
     * @allow (create): Users can create their own profile.
     * @deny (get, update, delete): Other users cannot access this profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /orders collection.
     * @path /orders/{orderId}
     * @allow (get, update, delete): Only the user who placed the order can access it.
     * @allow (create): Any signed-in user can create an order.
     * @deny (get, update, delete): Other users cannot access this order.
     * @principle Enforces document ownership for orders.
     */
    match /orders/{orderId} {
      allow get: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid && resource != null;
    }

    /**
     * @description Rules for the /settings collection.
     * @path /settings/{settingId}
     * @allow (get, list): Anyone can read application settings.
     * @allow (create, update, delete): No one can modify application settings through the client.
     * @principle Allows public read access, restricts write access.
     */
    match /settings/{settingId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}