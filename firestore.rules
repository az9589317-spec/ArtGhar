/**
 * @description: This ruleset enforces a strict user-ownership model for user data and allows public read access to product, category, and artist data. Writes to product, category, and artist collections are unrestricted to allow for rapid prototyping.
 * @dataStructure:
 *   - /products/{productId}: Public product information.
 *   - /categories/{categoryId}: Public category information.
 *   - /artists/{artistId}: Public artist information.
 *   - /users/{userId}: User profile data, accessible only by the user.
 *   - /users/{userId}/shoppingCarts/{cartId}: Shopping cart data, accessible only by the user.
 * @keySecurityDecisions:
 *   - User listing is implicitly denied by the absence of a `list` rule on the `/users` collection.
 *   - Public read access is granted to the `products`, `categories`, and `artists` collections to facilitate open browsing and discovery during the prototyping phase.
 *   - Writes to the `/products`, `/categories`, and `/artists` collections are open to allow for fast iteration on the data model. This should be restricted in production.
 *   - The `shoppingCarts` subcollection enforces strict ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description: Allows anyone to read product information.  Writes are unrestricted to allow for rapid prototyping.
     * @path: /products/{productId}
     * @allow: (get, list) Any user can read product information.
     * @deny: (create, update, delete) No specific denial, but writes should be restricted in a production environment.
     * @principle: Allows public read access to product data.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if true; // TODO: Add owner validation in production.
    }

    /**
     * @description: Allows anyone to read category information.  Writes are unrestricted to allow for rapid prototyping.
     * @path: /categories/{categoryId}
     * @allow: (get, list) Any user can read category information.
     * @deny: (create, update, delete) No specific denial, but writes should be restricted in a production environment.
     * @principle: Allows public read access to category data.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if true; // TODO: Add owner validation in production.
    }

    /**
     * @description: Allows anyone to read artist information. Writes are unrestricted to allow for rapid prototyping.
     * @path: /artists/{artistId}
     * @allow: (get, list) Any user can read artist information.
     * @deny: (create, update, delete) No specific denial, but writes should be restricted in a production environment.
     * @principle: Allows public read access to artist data.
     */
    match /artists/{artistId} {
      allow get, list: if true;
      allow create, update, delete: if true; // TODO: Add owner validation in production.
    }

    /**
     * @description: Manages user profiles.  Allows a user to create their own profile and restricts read/write access to the profile owner.
     * @path: /users/{userId}
     * @allow: (create) User with UID 'user123' can create their own user document.
     * @deny: (create) User with UID 'user456' cannot create a user document for 'user123'.
     * @allow: (get, update, delete) User with UID 'user123' can read/update/delete their own user document.
     * @deny: (get, update, delete) User with UID 'user456' cannot read/update/delete user document for 'user123'.
     * @principle: Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description: Manages shopping carts for each user. Only the user can create, read, update, or delete their own shopping carts.
     * @path: /users/{userId}/shoppingCarts/{cartId}
     * @allow: (create) User with UID 'user123' can create a shopping cart under their user document.
     * @deny: (create) User with UID 'user456' cannot create a shopping cart under user document for 'user123'.
     * @allow: (get, list, update, delete) User with UID 'user123' can read/list/update/delete their own shopping cart.
     * @deny: (get, list, update, delete) User with UID 'user456' cannot read/list/update/delete shopping cart under user document for 'user123'.
     * @principle: Enforces document ownership for shopping carts.
     */
    match /users/{userId}/shoppingCarts/{cartId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    // --- Helper Functions ---

    /**
     * @description: Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description: Checks if the request is made by the owner of the resource.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description: Checks if the request is made by the existing owner of the resource.  Also verifies that the document exists before allowing the operation.
     */
    function isExistingOwner(userId) {
        return isSignedIn() && request.auth.uid == userId && resource != null;
    }
  }
}