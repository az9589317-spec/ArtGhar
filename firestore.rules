/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with public read access for some collections.
 *
 * Data Structure:
 * - /products/{productId}: Publicly readable product listings. Only admins can create, update, or delete.
 * - /categories/{categoryId}: Publicly readable product categories. Only admins can create, update, or delete.
 * - /artists/{artistId}: Publicly readable artist profiles. Only admins can create, update, or delete.
 * - /users/{userId}: User profile information, accessible only to the user and admins.
 * - /orders/{orderId}: Customer orders, accessible only to the user who placed the order and admins.
 * - /settings/{settingId}: Application-wide settings.  Read-only for all.  Write access denied.
 *
 * Key Security Decisions:
 * - Public read access for products, categories, and artists to allow for easy browsing.
 * - Strict user-ownership for user profiles and orders.
 * - Only users with "admin" role can create, update or delete products, categories and artists
 * - Disables listing of user profiles for privacy reasons.
 *
 * Denormalization for Authorization:
 * - The `UserProfile` entity includes a `role` field. This is used to determine if a user has admin privileges.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user's ID matches the requested ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an admin.
     */
    function isAdmin() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    /**
     * @description Checks if the user is the owner of the existing document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Products are publicly readable, but only admins can create, update, or delete them.
     * @path /products/{productId}
     * @allow (get, list): if true (public read).
     * @allow (create): if isAdmin() (admin can create products).
     * @allow (update): if isAdmin() && resource != null (admin can update products, ensures document exists).
     * @allow (delete): if isAdmin() && resource != null (admin can delete products, ensures document exists).
     * @deny (create): if !isAdmin() (non-admins cannot create products).
     * @deny (update): if !isAdmin() (non-admins cannot update products).
     * @deny (delete): if !isAdmin() (non-admins cannot delete products).
     * @principle Allows public reads, restricts writes to admins.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Categories are publicly readable, but only admins can create, update, or delete them.
     * @path /categories/{categoryId}
     * @allow (get, list): if true (public read).
     * @allow (create): if isAdmin() (admin can create categories).
     * @allow (update): if isAdmin() && resource != null (admin can update categories, ensures document exists).
     * @allow (delete): if isAdmin() && resource != null (admin can delete categories, ensures document exists).
     * @deny (create): if !isAdmin() (non-admins cannot create categories).
     * @deny (update): if !isAdmin() (non-admins cannot update categories).
     * @deny (delete): if !isAdmin() (non-admins cannot delete categories).
     * @principle Allows public reads, restricts writes to admins.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Artists are publicly readable, but only admins can create, update, or delete them.
     * @path /artists/{artistId}
     * @allow (get, list): if true (public read).
     * @allow (create): if isAdmin() (admin can create artists).
     * @allow (update): if isAdmin() && resource != null (admin can update artists, ensures document exists).
     * @allow (delete): if isAdmin() && resource != null (admin can delete artists, ensures document exists).
     * @deny (create): if !isAdmin() (non-admins cannot create artists).
     * @deny (update): if !isAdmin() (non-admins cannot update artists).
     * @deny (delete): if !isAdmin() (non-admins cannot delete artists).
     * @principle Allows public reads, restricts writes to admins.
     */
    match /artists/{artistId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description User profiles are only accessible to the user and admins.
     * @path /users/{userId}
     * @allow (get): if isOwner(userId) || isAdmin() (user can get their own profile, admin can get any).
     * @allow (create): if isOwner(userId) (user can create their own profile).
     * @allow (update): if isExistingOwner(userId) || isAdmin() (user can update their own profile, admin can update any).
     * @allow (delete): if isExistingOwner(userId) || isAdmin() (user can delete their own profile, admin can delete any).
     * @deny (list): if true (no listing of user profiles).
     * @principle Enforces user-ownership for profile data, restricts listing.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
      allow list: if false;
    }

    /**
     * @description Customer orders are only accessible to the user who placed the order and admins.
     * @path /orders/{orderId}
     * @allow (get, list): if isOwner(resource.data.userId) || isAdmin() (user can get/list their own orders, admin can get/list any).
     * @allow (create): if isSignedIn() && request.resource.data.userId == request.auth.uid (signed-in user can create order for themselves).
     * @allow (update): if (isOwner(resource.data.userId) && resource != null) || (isAdmin() && resource != null)  (user can update their own orders, admin can update any).
     * @allow (delete): if (isOwner(resource.data.userId) && resource != null) || (isAdmin() && resource != null) (user can delete their own orders, admin can delete any).
     * @principle Enforces user-ownership for order data.
     */
    match /orders/{orderId} {
      allow get, list: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if (isOwner(resource.data.userId) && resource != null) || (isAdmin() && resource != null);
      allow delete: if (isOwner(resource.data.userId) && resource != null) || (isAdmin() && resource != null);
    }

    /**
     * @description Application-wide settings. Read-only for all.
     * @path /settings/{settingId}
     * @allow get, list: if true;
     * @deny create, update, delete: if true;
     * @principle Read-only access for settings.
     */
    match /settings/{settingId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}