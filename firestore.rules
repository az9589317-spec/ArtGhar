/**
 * @fileoverview Firestore Security Rules for the e-commerce application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for shopping carts and allows public read access to product, category, and artist information.
 * User profiles are private and only accessible to the user themselves.
 *
 * Data Structure:
 * - /products/{productId}: Public product information.
 * - /categories/{categoryId}: Public category information.
 * - /artists/{artistId}: Public artist information.
 * - /users/{userId}: Private user profile information.
 * - /users/{userId}/shoppingCarts/{cartId}: User-owned shopping cart data.
 *
 * Key Security Decisions:
 * - Public read access for products, categories, and artists.
 * - Strict user ownership for shopping carts and user profiles.
 * - Users can only create their own profiles.
 * - No user listing is allowed.
 *
 * Denormalization for Authorization:
 * - Shopping carts include the userId to allow rules to validate access based on request.auth.uid without needing to fetch the user document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to product information and owner-only writes
     * @path /products/{productId}
     * @allow (get, list)
     * @allow (create) if request.auth.uid != null && request.resource.data.artistId == request.auth.uid
     * @allow (update, delete) if request.auth.uid != null && resource.data.artistId == request.auth.uid
     * @deny (create) if request.resource.data.artistId != request.auth.uid
     * @deny (update, delete) if resource.data.artistId != request.auth.uid
     * @principle Allows anyone to read products, but only the artist can modify them.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.artistId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.artistId);
    }

    /**
     * @description Allows public read access to category information.
     * @path /categories/{categoryId}
     * @allow (get, list)
     * @deny (create, update, delete) if true
     * @principle Allows anyone to read categories, but no one can modify them.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to artist information.
     * @path /artists/{artistId}
     * @allow (get, list)
     * @deny (create, update, delete) if true
     * @principle Allows anyone to read artists, but no one can modify them.
     */
    match /artists/{artistId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows a user to manage their own shopping carts.
     * @path /users/{userId}/shoppingCarts/{cartId}
     * @allow (get, list) if request.auth.uid == userId
     * @allow (create, update, delete) if request.auth.uid == userId
     * @deny (get, list) if request.auth.uid != userId
     * @deny (create, update, delete) if request.auth.uid != userId
     * @principle Enforces user ownership for shopping carts.
     */
    match /users/{userId}/shoppingCarts/{cartId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update, delete: if isOwner(userId) && isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read and update their own user profile.
     * @path /users/{userId}
     * @allow (get) if request.auth.uid == userId
     * @allow (create) if request.auth.uid == userId
     * @allow (update) if request.auth.uid == userId
     * @deny (list, delete) if true
     * @principle Enforces user ownership for user profiles and prevents user listing.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && request.resource.data.id == resource.data.id;
      allow list, delete: if false;
    }

    /**
     * @description Prevents anyone from accessing the settings collection.
     * @path /settings/socialMedia
     * @deny (get, list, create, update, delete) if true
     * @principle Prevents unauthenticated or authenticated access to any documents in the settings collection.
     */
    match /settings/socialMedia {
      allow get, list, create, update, delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}