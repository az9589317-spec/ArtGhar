/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict access control based on
 * user authentication and explicit authorization. It allows for rapid
 * prototyping by relaxing schema validation, focusing instead on secure data
 * access patterns. The design leans towards a "secure by default" approach.
 *
 * Data Structure:
 * - /products/{productId}: Public product listings.
 * - /categories/{categoryId}: Public product categories.
 * - /artists/{artistId}: Public artist profiles.
 * - /users/{userId}: User profile information, accessible only to the user.
 * - /orders/{orderId}: Customer orders, accessible only to the user who created the order.
 * - /settings/{settingId}: Application-wide settings (only 'socialMedia'), publicly readable.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Read-only collections (categories, artists, products, settings) are publicly readable.
 * - Orders are accessible only to the user who created them.
 *
 * Denormalization for Authorization:
 *   The `orders` collection requires a `userId` field on each document to
 *   enforce order ownership.
 *
 * Structural Segregation:
 *   There is no need for structural segregation in this data model.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId The user ID to compare against.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the existing owner of the document.
     * @param {string} userId The user ID to compare against.
     * @return {bool} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**************** PRODUCTS ****************/

    /**
     * @description Allows anyone to read product listings, but restricts modifications.
     * @path /products/{productId}
     * @allow (get, list) Anyone can read product listings.
     * @deny (create, update, delete) Only the owner can modify product listings.
     * @principle Public read, owner-only writes.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**************** CATEGORIES ****************/

    /**
     * @description Allows anyone to read product categories, but restricts modifications.
     * @path /categories/{categoryId}
     * @allow (get, list) Anyone can read product categories.
     * @deny (create, update, delete) No one can modify product categories through the client.
     * @principle Public read, no client writes.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**************** ARTISTS ****************/

    /**
     * @description Allows anyone to read artist profiles, but restricts modifications.
     * @path /artists/{artistId}
     * @allow (get, list) Anyone can read artist profiles.
     * @deny (create, update, delete) No one can modify artist profiles through the client.
     * @principle Public read, no client writes.
     */
    match /artists/{artistId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**************** USERS ****************/

    /**
     * @description Restricts access to user profiles to the owning user.
     * @path /users/{userId}
     * @allow (create) If the user ID in the path matches the authenticated user's ID.
     * @allow (get, update, delete) If the authenticated user's ID matches the user ID in the path.
     * @deny (list) Listing users is not allowed.
     * @deny (create, update, delete) If the authenticated user's ID does not match the user ID in the path.
     * @principle Enforces user-ownership for profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**************** ORDERS ****************/

    /**
     * @description Restricts access to customer orders to the owning user.
     * @path /orders/{orderId}
     * @allow (create) If the user ID in the request matches the authenticated user's ID.
     * @allow (get, update, delete) If the authenticated user's ID matches the user ID in the order document.
     * @deny (list) Listing orders is not allowed.
     * @deny (create, update, delete) If the authenticated user's ID does not match the user ID in the order document.
     * @principle Enforces user-ownership for orders.
     */
    match /orders/{orderId} {
      allow get: if isOwner(resource.data.userId);
      allow list: if isOwner(request.auth.uid); //Fixes error reported by NextJS
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**************** SETTINGS ****************/

    /**
     * @description Allows anyone to read application settings, but restricts modifications.
     * @path /settings/{settingId}
     * @allow (get, list) Anyone can read application settings.
     * @deny (create, update, delete) No one can modify application settings through the client.
     * @principle Public read, no client writes.
     */
    match /settings/{settingId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}