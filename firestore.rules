/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for shopping carts and user profiles,
 *              while allowing public read access to product, category, and artist information.
 *
 * Data Structure:
 * - /products/{productId}: Public product information.
 * - /categories/{categoryId}: Public category information.
 * - /artists/{artistId}: Public artist information.
 * - /users/{userId}: User profile information, only accessible to the user themselves.
 * - /users/{userId}/shoppingCarts/{cartId}: Shopping carts owned by a specific user.
 *
 * Key Security Decisions:
 * - Public read access for products, categories, and artists.
 * - User-owned shopping carts and user profiles are strictly private.
 * - Users can only create their own user document.
 * - No user listing is allowed.
 *
 * Denormalization for Authorization:
 * - Shopping carts include the userId to allow authorization without additional `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to product information. Only owners can create, update, or delete products.
     * @path /products/{productId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, owner-only write
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      // CRITICAL: Cannot implement owner-only writes. The 'Product' entity is missing an 'ownerId' or 'authorId' field.
    }

    /**
     * @description Allows public read access to category information. Only owners can create, update, or delete categories.
     * @path /categories/{categoryId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, owner-only write
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      // CRITICAL: Cannot implement owner-only writes. The 'Category' entity is missing an 'ownerId' or 'authorId' field.
    }

    /**
     * @description Allows public read access to artist information. Only owners can create, update, or delete artists.
     * @path /artists/{artistId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, owner-only write
     */
    match /artists/{artistId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      // CRITICAL: Cannot implement owner-only writes. The 'Artist' entity is missing an 'ownerId' or 'authorId' field.
    }

    /**
     * @description Enforces user-ownership for shopping carts. Only the owner can read, create, update, or delete their own cart.
     * @path /users/{userId}/shoppingCarts/{cartId}
     * @allow (get, list, create, update, delete) User with ID 'user123' can access their own cart.
     * @deny (get, list, create, update, delete) User with ID 'user456' cannot access 'user123' shopping cart.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/shoppingCarts/{cartId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isOwner(userId) && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for user profiles. Only the user themselves can read, create, update, or delete their profile.
     * @path /users/{userId}
     * @allow (create, get, update, delete) User with ID 'user123' can create/access/modify their own profile.
     * @deny (create, get, update, delete) User with ID 'user456' cannot create/access/modify 'user123' profile.
     * @principle Enforces document ownership and self-creation.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId) && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // --- Helper functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}