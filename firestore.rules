/**
 * @fileoverview Firestore Security Rules for an e-commerce application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * (e.g., shopping carts) and allows public read access to product catalogs.
 *
 * Data Structure:
 * - /products/{productId}: Public product listings.
 * - /categories/{categoryId}: Public product categories.
 * - /artists/{artistId}: Public artist profiles.
 * - /users/{userId}: User profiles, only accessible by the user.
 * - /users/{userId}/shoppingCarts/{cartId}: Shopping carts owned by the user.
 *
 * Key Security Decisions:
 * - Public read access for product catalogs (products, categories, artists).
 * - User-owned shopping carts are secured via path-based authorization.
 * - Users can only create, read, update, and delete their own profiles and carts.
 * - Schema enforcement is relaxed for rapid prototyping.
 *
 * Denormalization for Authorization:
 * - ShoppingCarts contain the userId to avoid needing to read the User document
 *   for authorization. This improves performance and simplifies the rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to product listings. Only the owner can create, update, or delete products.
     * @path /databases/{database}/documents/products/{productId}
     * @allow (get, list): Any user can read product information.
     * @allow (create, update, delete): Only the owner (identified by a hypothetical 'ownerId' field) can modify product information.
     * @deny (create, update, delete): If there is no ownership field in product info.
     * @principle Allows public listing with owner-only writes BUT the product entity is missing an `ownerId` or `authorId` field.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to product categories. Only the owner can create, update, or delete categories.
     * @path /databases/{database}/documents/categories/{categoryId}
     * @allow (get, list): Any user can read category information.
     * @allow (create, update, delete): Only the owner (identified by a hypothetical 'ownerId' field) can modify category information.
     * @deny (create, update, delete): If there is no ownership field in category info.
     * @principle Allows public listing with owner-only writes BUT the category entity is missing an `ownerId` or `authorId` field.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to artist profiles. Only the owner can create, update, or delete artists.
     * @path /databases/{database}/documents/artists/{artistId}
     * @allow (get, list): Any user can read artist information.
     * @allow (create, update, delete): Only the owner (identified by a hypothetical 'ownerId' field) can modify artist information.
     * @deny (create, update, delete): If there is no ownership field in artist info.
     * @principle Allows public listing with owner-only writes BUT the artist entity is missing an `ownerId` or `authorId` field.
     */
    match /artists/{artistId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Enforces user-ownership for shopping carts.
     * @path /databases/{database}/documents/users/{userId}/shoppingCarts/{cartId}
     * @allow (get, list): Only the user who owns the cart can read it.
     * @allow (create): Only the user can create a cart with their userId.
     * @allow (update, delete): Only the user who owns the cart can modify or delete it.
     * @deny (create): If the userId in the cart data does not match the authenticated user's ID.
     * @deny (update, delete): If the cart does not exist or the user is not the owner.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId}/shoppingCarts/{cartId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (get): Only the user can read their profile.
     * @allow (list): Only the user can list their profile.
     * @allow (create): Only the user can create their profile and the user ID in the data matches the path.
     * @allow (update, delete): Only the user can update or delete their profile, if the user profile document exists.
     * @deny (create): If the userId in the profile data does not match the authenticated user's ID.
     * @deny (update): If a different user tries to update userId of user profile, it is denied.
     * @deny (delete): If the user profile document does not exist.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && resource.data.id == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access for social media settings.
     * @path /databases/{database}/documents/settings/socialMedia
     * @allow (get, list): Any user can read social media settings.
     * @deny (create, update, delete): No one can create, update, or delete social media settings.
     * @principle Allows public listing with owner-only writes BUT the setting entity is missing an `ownerId` or `authorId` field.
     */
    match /settings/socialMedia {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}