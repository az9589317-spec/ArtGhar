/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict ownership and role-based access control where appropriate.
 * It uses explicit `allow` and `deny` rules to define all permissions granularly.
 *
 * Data Structure:
 * - `/products/{productId}`: Public product listings.
 * - `/categories/{categoryId}`: Public product categories.
 * - `/artists/{artistId}`: Public artist profiles.
 * - `/users/{userId}`: User profiles, accessible only by the user and admins.
 * - `/orders/{orderId}`: Customer orders, accessible only by the user who placed the order.
 * - `/settings/{settingId}`: Application-wide settings, with 'socialMedia' document publicly readable.
 *
 * Key Security Decisions:
 * - Public read access is granted to the `/products`, `/categories`, `/artists` and `/settings/socialMedia` collections.
 * - Only authenticated users can create, update, or delete products, categories and artists.
 * - Users can only access their own profiles and orders.
 * - Admin roles are not yet implemented but the structure is in place.
 *
 * Denormalization for Authorization:
 *  The data model does not require denormalization. Ownership is checked directly within the rules based on the document paths (e.g., `/users/{userId}`) or document fields (e.g., `order.userId`).
 *
 * Structural Segregation:
 *  The app uses separate collections for public and private data. Public data (products, categories, artists) resides in top-level collections. Private user data (profiles, orders) is segregated under `/users/{userId}`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to product listings. Only authenticated users can create, update, or delete.
     * @path /products/{productId}
     * @allow (get, list): Any user can read product listings.
     * @allow (create): Any authenticated user can create a product. The artistId is immutable.
     * @allow (update, delete): Only the artist can update their product.
     * @deny Requests to change the artistId field.
     * @principle Public read, owner-only writes for products.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    /**
     * @description Grants public read access to product categories. Only authenticated users can create, update, or delete.
     * @path /categories/{categoryId}
     * @allow (get, list): Any user can read product categories.
     * @allow (create): Any authenticated user can create a category.
     * @allow (update, delete): Only the artist can update their product.
     * @deny Requests to change the artistId field.
     * @principle Public read, owner-only writes for categories.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    /**
     * @description Grants public read access to artist profiles. Only authenticated users can create, update, or delete.
     * @path /artists/{artistId}
     * @allow (get, list): Any user can read artist profiles.
     * @allow (create): Any authenticated user can create an artist.
     * @allow (update, delete): Only the artist can update their product.
     * @deny Requests to change the artistId field.
     * @principle Public read, owner-only writes for artists.
     */
    match /artists/{artistId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    /**
     * @description Restricts access to user profiles to the owner and admins. Allows self-creation.
     * @path /users/{userId}
     * @allow (create): The user can create their own profile if the userId matches their auth UID.
     * @allow (get, list): The user can read their own profile if the userId matches their auth UID.
     * @allow (update): The user can update their own profile if the userId matches their auth UID.
     * @allow (delete): The user can delete their own profile if the userId matches their auth UID.
     * @deny Requests where the userId does not match the auth UID.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow create: if isOwner(userId);
      allow get, list: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Restricts access to orders to the user who placed the order.
     * @path /orders/{orderId}
     * @allow (get, list): The user can read their own orders if the userId matches their auth UID.
     * @allow (create): The user can create their own orders.
     * @allow (update, delete): The user can update or delete their own orders.
     * @deny Requests where the userId does not match the auth UID.
     * @principle Enforces document ownership for orders.
     */
    match /orders/{orderId} {
      allow get, list: if request.auth.uid == resource.data.userId;
      allow create: if isSignedIn();
      allow update, delete: if request.auth.uid == resource.data.userId;
    }
    
    /**
     * @description Grants public read access to social media links in settings collection.
     * @path /settings/socialMedia
     * @allow (get): Any user can read the social media links.
     * @deny (list): Listing the settings collection is disallowed.
     * @deny (create, update, delete): No one can create, update, or delete settings documents.
     * @principle Public read access for social media links.
     */
    match /settings/socialMedia {
        allow get: if true;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Denies all access to other settings documents, use to catch all other documents in the settings collection.
     * @path /settings/{settingId}
     * @deny (get, list, create, update, delete): No one can get, list, create, update, or delete settings documents.
     * @principle No access to settings documents other than socialMedia.
     */
    match /settings/{settingId} {
        allow get, list, create, update, delete: if false;
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the resource.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }
}